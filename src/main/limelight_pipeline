import cv2
import numpy as np

# global variables go here:
testVar = 0

# To change a global variable inside a function,
# re-declare it the global keyword
def incrementTestVar():
    global testVar
    testVar = testVar + 1
    if testVar == 100:
        print("test")
    if testVar >= 200:
        print("print")
        testVar = 0

def drawDecorations(image):
    cv2.putText(image, 
        'Limelight python script!', 
        (0, 230), 
        cv2.FONT_HERSHEY_SIMPLEX, 
        .5, (0, 255, 0), 1, cv2.LINE_AA)
    
# runPipeline() is called every frame by Limelight's backend.
def runPipeline(image, llrobot):
    blur = cv2.GaussianBlur(image, (25, 25), 2)
    hsv = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV)
    hsl = cv2.cvtColor(blur, cv2.COLOR_BGR2HLS)
    rgb = cv2.cvtColor(blur, cv2.COLOR_BGR2RGB)

    hsv_thresh = cv2.inRange(hsv, (0, 200, 50), (50, 255, 150))
    hsl_thresh = cv2.inRange(hsl, (20, 20, 200), (255, 255, 255))
    rgb_thresh = cv2.inRange(rgb, (0, 50, 00), (255, 255, 255))

    inter_and = cv2.bitwise_and(hsv_thresh, hsl_thresh)

    img_threshold = cv2.bitwise_and(rgb_thresh, inter_and)

    contours, _ = cv2.findContours(img_threshold, 
    cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
  
    largestContour = np.array([[]])
    llpython = [0,0,0,0,0,0,0,0]

    if len(contours) > 0:
        cv2.drawContours(image, contours, -1, 255, 2)
        largestContour = max(contours, key=cv2.contourArea)
        x,y,w,h = cv2.boundingRect(largestContour)

        cv2.rectangle(image,(x,y),(x+w,y+h),(0,255,255),2)
        llpython = [1,x,y,w,h,9,8,7]  
  
    incrementTestVar()
    drawDecorations(image)
       
    # make sure to return a contour,
    # an image to stream,
    # and optionally an array of up to 8 values for the "llpython"
    # networktables array
    return largestContour, image, llpython